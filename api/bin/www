#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
var https = require('https');
var cfenv = require( 'cfenv' );
var fs = require( 'fs' );
var cluster = require("cluster");
var numCPUs = require('os').cpus().length;

const conf = require("../config/conf");
const follow = require('../batch/follow.batch');


if (cluster.isMaster) {
  console.log = console.log.bind(void 0, "<pid: "+process.pid+"> :");
  console.error = console.error.bind(void 0, "<pid: "+process.pid+"> :");
  console.log("this pc have "+numCPUs+" processor");
  console.log("master pid is", process.pid);
  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
  cluster.on('exit', function(worker, code, signal) {
      console.error('Worker %d died with code/signal %s. Restarting worker...', worker.process.pid, signal || code);
      cluster.fork();
  });
}else{
  console.log = console.log.bind(void 0, "[pid: "+process.pid+"] :");
  console.error = console.error.bind(void 0, "[pid: "+process.pid+"] :");
  console.log("slave pid is", process.pid);
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  //var server = https.createServer(options, app);
  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// batch scripts
if (cluster.isMaster && conf.env === 'prod') {
  console.log("enabled batch script");
  setInterval(follow.renew, 20*60*1000);
}
